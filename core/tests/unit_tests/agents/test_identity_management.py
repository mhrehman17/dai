import unittest
from unittest.mock import patch
import time
from core.agents.identity_management import IdentityManagement

class TestIdentityManagement(unittest.TestCase):

    def setUp(self):
        # Create an instance of IdentityManagement for testing
        self.identity_manager = IdentityManagement()

    def test_generate_agent_id(self):
        # Test generation of unique agent IDs
        agent_id = self.identity_manager.generate_agent_id()
        self.assertIsNotNone(agent_id)
        self.assertEqual(len(agent_id), 36)  # UUID should be 36 characters long

    def test_generate_secret_key(self):
        # Test generation of secret key
        agent_id = self.identity_manager.generate_agent_id()
        secret_key = self.identity_manager.generate_secret_key(agent_id)
        self.assertIsNotNone(secret_key)
        self.assertEqual(len(secret_key), 64)  # Secret key generated by os.urandom(32).hex() should be 64 characters

    def test_generate_token_success(self):
        # Test generation of token for an existing agent
        agent_id = self.identity_manager.generate_agent_id()
        self.identity_manager.generate_secret_key(agent_id)
        timestamp = int(time.time())
        token = self.identity_manager.generate_token(agent_id, timestamp)
        self.assertIsNotNone(token)
        self.assertEqual(len(token), 64)  # SHA256 hash should be 64 characters

    def test_generate_token_no_secret_key(self):
        # Test token generation for an agent without a secret key
        agent_id = self.identity_manager.generate_agent_id()
        with self.assertRaises(ValueError):
            self.identity_manager.generate_token(agent_id)

    @patch('time.time', return_value=1000000)
    def test_verify_token_success(self, mock_time):
        # Test verification of a valid token
        agent_id = self.identity_manager.generate_agent_id()
        self.identity_manager.generate_secret_key(agent_id)
        timestamp = 1000000
        token = self.identity_manager.generate_token(agent_id, timestamp)
        is_valid = self.identity_manager.verify_token(agent_id, token, timestamp)
        self.assertTrue(is_valid)

    @patch('time.time', return_value=1000000)
    def test_verify_token_expired(self, mock_time):
        # Test verification of an expired token
        agent_id = self.identity_manager.generate_agent_id()
        self.identity_manager.generate_secret_key(agent_id)
        old_timestamp = 500000  # Arbitrary old timestamp
        token = self.identity_manager.generate_token(agent_id, old_timestamp)
        is_valid = self.identity_manager.verify_token(agent_id, token, old_timestamp, max_age_seconds=300)
        self.assertFalse(is_valid)  # Token should be considered expired

    def test_verify_token_invalid(self):
        # Test verification of an invalid token
        agent_id = self.identity_manager.generate_agent_id()
        self.identity_manager.generate_secret_key(agent_id)
        timestamp = int(time.time())
        fake_token = "fake_token_value"  # This token should not match the expected token
        is_valid = self.identity_manager.verify_token(agent_id, fake_token, timestamp)
        self.assertFalse(is_valid)

if __name__ == '__main__':
    unittest.main()
